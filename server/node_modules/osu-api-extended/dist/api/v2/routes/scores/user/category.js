"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.description = void 0;
const mods_1 = require("../../../../../utility/mods");
const request_1 = require("../../../../../utility/request");
const request = (0, request_1.namespace)('https://osu.ppy.sh/api/v2/');
exports.description = {
    auth: 1,
    title: __filename,
    method: 'GET',
    description: 'Return list of user scores on a beatmap',
    imports: [
        'mods'
    ],
    params: [
        {
            type: 'number',
            name: 'user',
            optional: false,
            description: 'id of the user',
        },
        {
            type: 'string',
            name: 'type',
            optional: false,
            description: '\`\`\`recent\`\`\` or \`\`\`best\`\`\` or \`\`\`firsts\`\`\` or \`\`\`pinned\`\`\`',
        },
        {
            name: 'object',
            params: [
                {
                    type: 'boolean',
                    name: 'include_fails',
                    options: false,
                    optional: true,
                    description: 'Only for \`\`\`recent\`\`\` scores, include scores of failed plays. Set to \`\`\`true\`\`\` to include them. Defaults to \`\`\`false\`\`\`',
                },
                {
                    type: 'string',
                    name: 'mode',
                    optional: true,
                    description: '\`\`\`osu\`\`\` or \`\`\`fruits\`\`\` or \`\`\`mania\`\`\` or \`\`\`taiko\`\`\`',
                },
                {
                    type: 'number',
                    name: 'mods',
                    options: false,
                    optional: true,
                    description: 'Use \`\`\`mods.enums\`\`\` instead of mods id or name',
                },
                {
                    type: 'number',
                    name: 'limit',
                    optional: true,
                    description: 'Maximum number of results',
                },
                {
                    type: 'string',
                    name: 'offset',
                    optional: true,
                    description: 'Result offset for pagination',
                },
            ]
        },
    ],
};
const name = async (user, type, obj) => {
    // @ts-ignore
    if (obj.include_fails)
        obj.include_fails = obj.include_fails == true ? 1 : 0;
    const data = await request(`users/${user}/scores/${type}`, {
        method: 'GET',
        params: obj,
    });
    if (Array.isArray(data)) {
        const transform = data.map((v, i) => ({
            position: i + 1,
            mods_id: (0, mods_1.id)(v.mods.join('')) || 0,
            ...v
        }));
        if (obj.mods)
            return transform.filter(r => (r.mods_id & obj.mods) > 0);
        return transform;
    }
    ;
    return data;
};
exports.default = name;
//# sourceMappingURL=category.js.map